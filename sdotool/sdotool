#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_command=""
  target_key=""
  target_value=""
  color=""
  quiet=""
}

_requirements() {
    _check_cmd \
      "su" \
      "tsu"
}

_key_send() {
  local \
    _key="${1}" \
    _keyevent \
    _cmd=()
  _msg_info \
    "Sending key '${_key}'"
  _keyevent="$( \
    _keyevent_get \
      "${_key}")"
  if [[ "${_keyevent}" == "" ]]; then
    _msg_error \
      "key not recorded" \
      1
  else
    _msg_info \
      "sending ${_key} -> ${_keyevent}"
  fi
  _cmd=(
    input
      keyevent
      "${_keyevent}"
    )
  sudo \
    "${_cmd[@]}"
}

_keyevent_get() {
  local \
    _key="${1}" \
    _keyevent
  if [[ "${_key}" == "Space" ]]; then
    _keyevent=62
  elif [[ "${_key}" == "Enter" ]]; then
    _keyevent=66
  elif [[ "${_key}" == "Down" ]]; then
    _keyevent=19
  elif [[ "${_key}" == "Up" ]]; then
    _keyevent=20
  elif [[ "${_key}" == "Left" ]]; then
    _keyevent=21
  elif [[ "${_key}" == "Right" ]]; then
    _keyevent=22
  elif [[ "${_key}" == "Unlock" ]]; then
    _keyevent=82
  else
    _keyevent=""
  fi
  echo \
    "${_keyevent}"
}

_sdotool() {
  local \
    _command="${1}" \
    _value="${2}" \
    _args=() \
    _app \
    _prefs \
    _obj
  if [[ "${_command}" == "key" ]]; then
    _cmd="key_send"
    _args+=(
      "${_value}"
    )
  fi
  "_${_cmd}" \
    "${_args[@]}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
command-line Surfaceflinger automation tool
usage:
  $(_get "app" "name")
    [options]
    <command>
    (<argument>)
  commands:
     key         Send key event corresponding to symbol
       <symbol>
  options:
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _get_date
  TZ=UTC \
    printf \
      -v _get_date \
      '%(%FT%R%z)T' \
      "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "           Operation date:   $(_get "_get" "date")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "               Target key:   $(_get "target" "key")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no command given" \
    0
  _set_overrides
  _usage \
    1
fi
_set \
  "target" \
  "command" \
  "${1}"
if (( 1 < $# )); then
  _set \
    "target" \
    "key" \
    "${2}"
else
  _msg_error \
    "no argument given" \
    0
  _set_overrides
  _usage \
    1
fi
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "command")"
  "$( \
    _get \
      "target" \
      "key")"
)
_sdotool \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
